package com.mekanly.presentation.ui.fragments.singleHouse

import android.annotation.SuppressLint
import android.content.Intent
import android.graphics.Paint
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.viewpager2.widget.ViewPager2
import com.mekanly.R
import com.mekanly.data.models.Banner
import com.mekanly.data.models.DataGlobalOptions
import com.mekanly.data.models.HouseDetails
import com.mekanly.data.models.Option
import com.mekanly.data.models.Report
import com.mekanly.domain.model.ResponseBodyState
import com.mekanly.databinding.FragmentSingleHouseBinding
import com.mekanly.helpers.PreferencesHelper
import com.mekanly.presentation.ui.adapters.AdapterInformationInSingleHouse
import com.mekanly.presentation.ui.adapters.HouseItem
import com.mekanly.presentation.ui.enums.BannerType
import com.mekanly.presentation.ui.fragments.home.AdapterBigBanners
import com.mekanly.presentation.ui.fragments.singleHouse.adapter.AdapterPossibilities
import com.mekanly.ui.fragments.home.FragmentHomeState
import com.mekanly.ui.fragments.home.VMHome
import com.mekanly.ui.fragments.singleHouse.report.ReportBottomSheetFragment
import com.mekanly.ui.fragments.singleHouse.report.VMReport
import com.mekanly.ui.fragments.favorite.FavoritesViewModel
import com.mekanly.ui.fragments.search.viewModel.VMSearch
import com.mekanly.utils.extensions.showErrorSnackBar
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.Locale

class FragmentSingleHouse : Fragment() {

    private lateinit var binding: FragmentSingleHouseBinding
    private val args by navArgs<FragmentSingleHouseArgs>()
    private lateinit var houseAdapter: AdapterInformationInSingleHouse
    private lateinit var opportunityAdapter: AdapterPossibilities
    private lateinit var adapterBigBanners: AdapterBigBanners
    private val viewModelHouse: VMHome by viewModels()
    private val viewModel: VMSingleHouse by viewModels()
    private val viewModelSearch: VMSearch by activityViewModels()
    private val viewModelReport: VMReport by viewModels()
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: ViewModel –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    private val viewModelFavorite: FavoritesViewModel by viewModels()

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–∞
    private lateinit var currentHouse: HouseDetails
    private var isFavoriteChanged = false

    private var currentBigBannerPosition = 0
    private val bigBannerScrollHandler = Handler(Looper.getMainLooper())
    private val bigBannerScrollRunnable = object : Runnable {
        override fun run() {
            val itemCount = adapterBigBanners.itemCount
            if (itemCount == 0) return

            currentBigBannerPosition = (currentBigBannerPosition + 1) % itemCount
            binding.rvBigBanners.smoothScrollToPosition(currentBigBannerPosition)

            bigBannerScrollHandler.postDelayed(this, 5000) // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View {
        binding = FragmentSingleHouseBinding.inflate(inflater, container, false)
        getHouseInfo()
        initListeners()
        observeViewModel()

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        viewModelReport.getReports()
        observeReportViewModel()

        return binding.root
    }

    private fun observeViewModel() {
        lifecycleScope.launch {
            viewModel.singleHouseState.collectLatest {
                when (it) {
                    is ResponseBodyState.Error -> {
                        requireContext().showErrorSnackBar(binding.root, it.error.toString())
                        binding.progressBar.visibility = View.GONE
                    }

                    ResponseBodyState.Loading -> {
                        binding.progressBar.visibility = View.VISIBLE
                    }

                    is ResponseBodyState.Success -> {
                        delay(200)
                        binding.progressBar.visibility = View.GONE
                        val houseDetails = it.dataResponse as HouseDetails

                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º
                        currentHouse = houseDetails

                        setViewPager(houseDetails)
                        setHouseDetails(houseDetails)
                        setPossibilityAdapter(houseDetails.possibilities)
                        setHomeDetails(houseDetails)
                        decorationVipAndLuxHouses(houseDetails)

                        // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞
                        updateLikeButton(houseDetails.favorite)

                        // üîΩ –î–æ–±–∞–≤—å –≤—ã–∑–æ–≤ observeBannersViewModel() —Å—é–¥–∞:
                        observeBannersViewModel()
                        // –ò –∑–∞–≥—Ä—É–∑–∫—É –±–∞–Ω–Ω–µ—Ä–æ–≤ —Ç–æ–∂–µ:
                        viewModelHouse.getBanners()
                    }

                    else -> {}
                }
            }
        }
    }

    private fun observeBannersViewModel() {
        lifecycleScope.launch {
            viewModelHouse.homeState.collectLatest { state ->
                when (state) {
                    is FragmentHomeState.Error -> {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤
                        Log.e("BannerError", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤: ${state.error}")
                    }

                    FragmentHomeState.Loading -> {
                        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    }

                    is FragmentHomeState.SuccessBanners -> {
                        val bigBanners = state.dataResponse.filter {
                            it.type == BannerType.BIG_BANNER.value
                        }
                        if (bigBanners.isNotEmpty()) {
                            setUpBigBanners(bigBanners)
                        }
                    }

                    else -> {}
                }
            }
        }
    }

    private fun observeReportViewModel() {
        lifecycleScope.launch {
            viewModelReport.reportState.collectLatest { state ->
                when (state) {
                    is ResponseBodyState.Error -> {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
                        Toast.makeText(
                            requireContext(),
                            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏—á–∏–Ω –∂–∞–ª–æ–±: ${state.error}",
                            Toast.LENGTH_SHORT
                        ).show()
                    }

                    ResponseBodyState.Loading -> {
                        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    }

                    is ResponseBodyState.SuccessList -> {
                        // –û—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –∂–∞–ª–æ–±—ã –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                        Log.d(
                            "ReportList",
                            "–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${(state.dataResponse as List<*>).size} –ø—Ä–∏—á–∏–Ω –∂–∞–ª–æ–±"
                        )
                    }

                    else -> {}
                }
            }
        }

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
        lifecycleScope.launch {
            viewModelReport.selectedReport.collectLatest { report ->
                if (report != null) {
                    Log.d("SelectedReport", "–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞: ${report.description}")
                }
            }
        }
    }

    private fun setPossibilityAdapter(possibilities: List<Option>) {
        opportunityAdapter = AdapterPossibilities(possibilities)
        binding.rvOpportunity.layoutManager = GridLayoutManager(requireContext(), 2)
        binding.rvOpportunity.adapter = opportunityAdapter
    }

    @SuppressLint("SetTextI18n")
    private fun setHouseDetails(house: HouseDetails) {
        binding.apply {
            tvTitle.text = house.name
            tvDate.text = formatDate(house.createdAt)
            tvDetails.text = house.description
            tvHouseType.text = house.categoryName
            tvViewCount.text = house.viewed.toString()
            tvAddress.text = "${house.location.parentName}/${house.location.name}"

            btnComments.text = if (house.commentCount > 0) {
                getString(R.string.comments_with_count, house.comment)
            } else {
                getString(R.string.comments) }

            val phoneNumber = house.bronNumber.orEmpty()

            btnSms.setOnClickListener {
                val smsIntent = Intent(Intent.ACTION_VIEW).apply {
                    data = Uri.parse("sms:$phoneNumber")
                    putExtra("sms_body", "")
                }
                startActivity(smsIntent)
            }

            btnCall.setOnClickListener {
                val callIntent = Intent(Intent.ACTION_DIAL).apply {
                    data = Uri.parse("tel:$phoneNumber")
                }
                startActivity(callIntent)
            }
        }
    }

    private fun setViewPager(house: HouseDetails) {
        val imageSliderAdapter = HouseImagesAdapter(house.images)
        binding.viewPager.adapter = imageSliderAdapter

        val totalCount = house.images.size
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        binding.countImages.text = "1/$totalCount"

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        binding.viewPager.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
            override fun onPageSelected(position: Int) {
                super.onPageSelected(position)
                binding.countImages.text = "${position + 1}/$totalCount"
            }
        })
    }

    private fun setHomeDetails(dataResponse: HouseDetails) {
        val houseList = listOf(
            HouseItem(R.drawable.ic_houses_for_sale, "B√∂l√ºmi", dataResponse.categoryName),
            HouseItem(
                R.drawable.location_icon, "√ùerle≈ü√Ω√§n √Ωeri", dataResponse.location?.name ?: ""
            ),
            HouseItem(R.drawable.ic_calendar, "Go√Ωlan senesi", formatDate(dataResponse.createdAt)),
            HouseItem(R.drawable.ic_phone, "Telefon nomeri", dataResponse.bronNumber.toString()),
            HouseItem(R.drawable.ic_elite, "Eml√§k g√∂rn√º≈üi", dataResponse.categoryName),
            HouseItem(R.drawable.ic_count_room, "Otag sany", dataResponse.roomNumber.toString()),
            HouseItem(
                R.drawable.ic_number_of_floors, "Gat sany", dataResponse.floorNumber.toString()
            ),
            // HouseItem(R.drawable.elitka, "Remont g√∂rn√º≈üi", dataResponse.luxe.toString()),
            // HouseItem(R.drawable.ic_total_area, "Umumy me√Ωdany", "Not available"),
            HouseItem(R.drawable.ic_price, "Bahasy", "${dataResponse.price} TMT")
        )

        houseAdapter = AdapterInformationInSingleHouse(houseList)
        binding.rvSingleHouse.layoutManager = GridLayoutManager(requireContext(), 2)
        binding.rvSingleHouse.adapter = houseAdapter
    }

    private fun getHouseInfo() {
        if (args.houseId == -1L) {
            return
        } else {
            viewModel.getHouseDetails(args.houseId)
        }
    }

    private fun initListeners() {
        binding.btnBack.setOnClickListener {
            findNavController().popBackStack()
//            viewModelSearch.getHouses()
        }

        binding.btnComments.setOnClickListener {
            showCommentsBottomSheet()
        }

        binding.btnReport.apply {
            paintFlags = binding.btnReport.paintFlags or Paint.UNDERLINE_TEXT_FLAG
            setOnClickListener {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ ViewModel –≤–º–µ—Å—Ç–æ PreferencesHelper
                val reports = viewModelReport.reportList.value
                if (reports.isNotEmpty()) {
                    openReportSelector(reports)
                } else {
                    Toast.makeText(
                        requireContext(),
                        "–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏—á–∏–Ω –∂–∞–ª–æ–±, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        Toast.LENGTH_SHORT
                    ).show()
                    // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
                    viewModelReport.getReports()
                }
            }
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ª–∞–π–∫–æ–≤
        binding.btnLike.setOnClickListener {
            currentHouse.let { house ->
                val currentLikeStatus = house.favorite

                // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                house.favorite = !currentLikeStatus
                updateLikeButton(house.favorite)

                // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ ViewModel
                viewModelFavorite.toggleLike(house.id, currentLikeStatus, "House")

                val message = if (currentLikeStatus) {
                    "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                } else {
                    "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                }
                Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
            }
        }
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
    private fun updateLikeButton(isLiked: Boolean) {
        binding.btnLike.setIconResource(
            if (isLiked) R.drawable.heart_bold else R.drawable.favourite_three
        )
    }


    private fun showCommentsBottomSheet() {
        val action = FragmentSingleHouseDirections.actionFragmentSingleHouseToBottomSheetComments(args.houseId)
        findNavController().navigate(action)
    }

    private fun formatDate(dateString: String): String {
        val inputFormat = SimpleDateFormat(
            "yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'", Locale.getDefault()
        ) // —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        val outputFormat =
            SimpleDateFormat("dd.MM.yyyy", Locale.getDefault()) // –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥

        val date = inputFormat.parse(dateString) // –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
        return outputFormat.format(date)
    }

    private fun openReportSelector(reports: List<Report>) {
        if (reports.isNotEmpty()) {
            val bottomSheet = ReportBottomSheetFragment(reports) { selectedReport ->
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ ViewModel
                viewModelReport.selectReport(selectedReport)

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é ViewModel
                sendReportToServer(selectedReport)

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                Toast.makeText(
                    requireContext(),
                    "–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${selectedReport.description}",
                    Toast.LENGTH_SHORT
                ).show()
            }
            bottomSheet.show(childFragmentManager, "ReportBottomSheet")
        } else {
            Toast.makeText(
                requireContext(), "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –¥–ª—è –∂–∞–ª–æ–±—ã", Toast.LENGTH_SHORT
            ).show()
        }
    }

    private fun sendReportToServer(report: Report) {
        val houseId = args.houseId.toInt() // –∏–ª–∏ toLong().toInt() –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        val abuseListId = report.id
        val message = report.description
        val type = report.type.ifBlank { "house" } // —Ç–∏–ø –∂–∞–ª–æ–±—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "house"

        viewModelReport.sendReport(
            abuseListId = abuseListId, itemId = houseId, message = message, type = type
        )
    }

    private fun setUpBigBanners(dataBanners: List<Banner>) {
        if (dataBanners.isEmpty()) return

        adapterBigBanners = AdapterBigBanners(dataBanners)
        binding.rvBigBanners.layoutManager =
            LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
        binding.rvBigBanners.adapter = adapterBigBanners
        binding.rvBigBanners.isNestedScrollingEnabled = true

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
        if (dataBanners.size > 1) {
            bigBannerScrollHandler.postDelayed(bigBannerScrollRunnable, 5000)
        }
    }

    private fun decorationVipAndLuxHouses(house: HouseDetails) {
        if (house.luxeStatus) {
            binding.decorationLinear.setBackgroundResource(R.drawable.vertical_lux_gradient)
            binding.luxLogo.visibility = View.VISIBLE
        }

        if (house.vipStatus) {
            binding.decorationLinear.setBackgroundResource(R.drawable.vertical_vip_gradient)
            binding.vipLogo.visibility = View.VISIBLE
        }
    }

    override fun onPause() {
        super.onPause()
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –ø–∞—É–∑–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        bigBannerScrollHandler.removeCallbacks(bigBannerScrollRunnable)
    }

    override fun onResume() {
        super.onResume()
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        if (::adapterBigBanners.isInitialized && adapterBigBanners.itemCount > 1) {
            bigBannerScrollHandler.postDelayed(bigBannerScrollRunnable, 5000)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º handlers –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ view
        bigBannerScrollHandler.removeCallbacks(bigBannerScrollRunnable)
    }
}